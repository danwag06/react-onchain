
struct VersionData {
  bytes outpoint;
  bytes description;
  int timestamp;
}
struct __scrypt_ts_Change {  int amount;  Ripemd160 address;}

contract ReactOnchainVersioning {
  const PubKey owner;
  const bytes originOutpoint;
  const bytes appName;
  @state VersionData[100] versionHistory;
  @state bytes[100] versionStrings;
  @state int versionCount;
  @state bytes latestVersion;
  bytes __scrypt_ts_ctx_hashoutputs;
  int __scrypt_ts_ctx_locktime;
  int __scrypt_ts_ctx_value;
  __scrypt_ts_Change __scrypt_ts_change;
  constructor(PubKey owner, bytes originOutpoint, bytes appName, VersionData[100] versionHistory, bytes[100] versionStrings, int versionCount, bytes latestVersion) {
    this.owner = owner;
    this.originOutpoint = originOutpoint;
    this.appName = appName;
    this.versionHistory = versionHistory;
    this.versionStrings = versionStrings;
    this.versionCount = versionCount;
    this.latestVersion = latestVersion;
  }
  public function addVersion(Sig ownerSig, bytes version, bytes outpoint, bytes description, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    require(checkSig(ownerSig, this.owner));
    require(version != b'');
    require(outpoint != b'');
    bool isDuplicate = false;
    loop (100) : i {
        if(this.versionStrings[i] == version) {
          isDuplicate = true;
        }
      }
    require(!isDuplicate);
    VersionData versionData = {outpoint, description, this.__scrypt_ts_ctx_locktime};
    this.latestVersion = version;
    loop (100) : i {
        if(i < 100 - 1) {
          this.versionHistory[100 - 1 - i] = this.versionHistory[100 - 2 - i];
          this.versionStrings[100 - 1 - i] = this.versionStrings[100 - 2 - i];
        }
      }
    this.versionHistory[0] = versionData;
    this.versionStrings[0] = version;
    this.versionCount++;
    int amount = this.__scrypt_ts_ctx_value;
    bytes outputs = this.buildStateOutput(amount) + this.buildChangeOutput();
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(outputs));
  }
  function buildStateOutput(int amount) : bytes {  return Utils.buildOutput(this.getStateScript(), amount);}
  function buildChangeOutput() : bytes {  return this.__scrypt_ts_change.amount > 0 ? Utils.buildOutput(Utils.buildPublicKeyHashScript(this.__scrypt_ts_change.address), this.__scrypt_ts_change.amount) : b'';}
}